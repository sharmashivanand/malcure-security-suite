<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}
/**
 * Singleton Class for WordPress Malware Scanner
 */
final class Malcure_Malware_Scanner {
	private static $instance = null;

	private $filemaxsize = 1111111;
	private $scanning    = false;
	private $results     = array();
	private $msu;

	private function __construct() {}

	static function get_instance() {
		if ( self::$instance === null ) {
			self::$instance = new self();
			self::$instance->init();
		}
		return self::$instance;
		$this->init();
	}
	function init() {
		$this->msu = mss_utils::get_instance();
		add_action( 'Malcure_security_suite_add_meta_boxes', array( $this, 'add_meta_boxes' ), 8 );
		// AJAX callback to resume scanning
		add_action( 'wp_ajax_mss_start_scan', array( $this, 'start_scan' ) );
		add_action( 'wp_ajax_nopriv_mss_start_scan', array( $this, 'start_scan' ) );
	}
	function add_meta_boxes() {
		$this->msu->flog( __FUNCTION__ );
		add_meta_box( 'mss_scanner', 'Malware Scanner', array( $this, 'scanner_meta_box' ), $GLOBALS['Malcure_security_suite']['pagehook'], 'main' );
	}
	/**
	 * Add scanner metabox UI to the WordPress admin area
	 */
	function scanner_meta_box() {
		$this->msu->flog( __FUNCTION__ );
		echo '<input class="mss_action" value="Click" id="mss_scan_btn" type="submit" />';
		?>
		<script type="text/javascript">
			jQuery(document).ready(function($){
				$('#mss_scan_btn').click(function(){
					console.log('Initiating Scan');
					mss_start_scan = {
						mss_start_scan_nonce: '<?php echo wp_create_nonce( 'mss_start_scan' ); ?>',
						action: "mss_start_scan",
					};
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: mss_start_scan,
						success: function(data, textStatus, jqXHR) {
							console.dir('success Data Begins');
							console.dir(data);
							console.dir(textStatus);
							console.dir(jqXHR);
							console.dir('success Data Ends');
							mss_status_updater = setTimeout(mss_update_scan_status,1000);
						},
						error: function( jqXHR, textStatus, errorThrown){},
						complete: function(jqXHR_data, textStatus) {
							console.log('This page needs to reload to watch progress.')
							// location.reload();
						},
					});
				});
			});
		</script>
		<?php
	}
	function start_scan() {
		$this->msu->flog( __FUNCTION__ );
		if ( $this->scanning ) {
			return; // Already scanning, don't start again
		}
		$this->scanning = true;
		$this->results  = array();
		$this->create_scanner_state_table();
		$previous_state = $this->get_scanner_state();
		if ( $previous_state ) {
			$this->resume_scan( $previous_state );
		} else {
			$this->scan_files_recursively( ABSPATH );
		}
		$this->scanning = false;
		$this->save_scanner_state( null ); // Clear the state after completion
	}
	private function scan_files_recursively( $dir ) {
		$this->msu->flog( __FUNCTION__ . ' ' . $dir );
		$files = scandir( $dir );
		foreach ( $files as $file ) {
			if ( $file === '.' || $file === '..' ) {
				continue;
			}
			$path = $dir . DIRECTORY_SEPARATOR . $file;
			if ( is_dir( $path ) ) {
				$this->scan_files_recursively( $path );
			} else {
				// File scanning code here
				// Check for potential malware signatures, and save state if needed
				$malware_signatures = array(
					'eval(',
					'base64_decode(',
					// Add more signatures as needed
				);
				$file_content = file_get_contents( $path );
				foreach ( $malware_signatures as $signature ) {
					if ( strpos( $file_content, $signature ) !== false ) {
						// Potential malware found
						$this->results[] = $path;
						// Save the state and send partial results if execution time is about to expire
						$this->check_and_save_state();
						break;
					}
				}
			}
		}
	}
	private function check_and_save_state() {
		$this->msu->flog( __FUNCTION__ );
		$max_execution_time = ini_get( 'max_execution_time' );
		if ( $max_execution_time > 0 ) {
			$time_buffer = 5; // Safe margin (in seconds)
			$time_left   = $max_execution_time - time() - $time_buffer;
			if ( $time_left <= 1 ) {
				// Execution time is about to expire, save the state and send partial results
				$this->save_scanner_state(
					array(
						'dir'     => $dir,
						'results' => $this->results,
					)
				);
				$this->send_partial_results(); // Save $results to the wp_options table
				wp_remote_get(
					admin_url( 'admin-ajax.php?action=mss_start_scan' ),
					array(
						'blocking' => false,
						'timeout'  => '0.01',
					)
				);
				exit; // Terminate the function gracefully
			}
		}
	}
	private function resume_scan( $state ) {
		$this->msu->flog( __FUNCTION__ );
		// Resume the scanning process based on the provided state
		$dir           = $state['dir'];
		$this->results = $state['results'];
		// Continue with the scanning process
		$this->scan_files_recursively( $dir );
	}
	private function create_scanner_state_table() {
		$this->msu->flog( __FUNCTION__ );
		global $wpdb;
		$table_name      = $wpdb->prefix . 'malcure_scanner_state';
		$charset_collate = $wpdb->get_charset_collate();
		$sql             = "CREATE TABLE IF NOT EXISTS $table_name (
            id INT NOT NULL AUTO_INCREMENT,
            state_data LONGTEXT NOT NULL,
            PRIMARY KEY (id)
        ) $charset_collate;";
		require_once ABSPATH . 'wp-admin/includes/upgrade.php';
		dbDelta( $sql );
	}
	private function save_scanner_state( $state ) {
		$this->msu->flog( __FUNCTION__ );
		global $wpdb;
		$table_name = $wpdb->prefix . 'malcure_scanner_state';
		if ( $state === null ) {
			$wpdb->query( "DELETE FROM $table_name" );
		} else {
			$state_data = serialize( $state );
			$wpdb->replace( $table_name, array( 'state_data' => $state_data ), array( '%s' ) );
		}
	}
	private function get_scanner_state() {
		$this->msu->flog( __FUNCTION__ );
		global $wpdb;
		$table_name = $wpdb->prefix . 'malcure_scanner_state';
		$state_data = $wpdb->get_var( "SELECT state_data FROM $table_name" );
		return $state_data ? unserialize( $state_data ) : null;
	}
	private function send_partial_results() {
		$this->msu->flog( __FUNCTION__ );
		// Save the partial results to the wp_options table.
		update_option( 'malware_scanner_partial_results', $this->results );
	}
}

Malcure_Malware_Scanner::get_instance();

