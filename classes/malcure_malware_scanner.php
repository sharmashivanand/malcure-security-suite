<?php


if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Singleton Class for WordPress File Indexer
 */
final class Malcure_Malware_Scanner {
	private static $instance = null;

	public $filemaxsize = 1111111;

	private $indexing     = false;
	private $file_paths   = array();
	private $current_dir  = '';
	private $dirs_to_scan = array(); // Queue to hold directories to be scanned
	private $scanned_dirs = array();

	private function __construct() {
		// register_shutdown_function( array( $this, 'maybe_save_and_fork_via_ajax' ) );
	}

	public static function get_instance() {
		if ( self::$instance === null ) {
			self::$instance = new self();
			self::$instance->init();
		}
		return self::$instance;
	}

	function init() {
		ini_set( 'max_execution_time', 5 ); // Set the max_execution_time to 5 seconds for testing resumption
		add_action( 'Malcure_security_suite_add_meta_boxes', array( $this, 'add_meta_boxes' ), 8 );
		add_action( 'wp_ajax_nopriv_mss_start_scan', array( $this, 'start_scanning' ) );
		add_action( 'wp_ajax_mss_start_scan', array( $this, 'start_scanning' ) );
	}

	function add_meta_boxes() {

		add_meta_box( 'mss_scanner', 'Malware Scanner', array( $this, 'scanner_meta_box' ), $GLOBALS['Malcure_security_suite']['pagehook'], 'main' );
	}

	function scanner_meta_box() {

		echo '<input class="mss_action" value="Click" id="mss_scan_btn" type="submit" />';
		echo '<pre>' . print_r( get_option( 'file_indexed_files' ), 1 ) . '</pre>';
		?>
		<script type="text/javascript">
			jQuery(document).ready(function($){
				$('#mss_scan_btn').click(function(){
					console.log('Initiating Scan');
					mss_start_scan = {
						mss_start_scan_nonce: '<?php echo wp_create_nonce( 'mss_start_scan' ); ?>',
						action: "mss_start_scan",
					};
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: mss_start_scan,
						success: function(data, textStatus, jqXHR) {
							console.dir('success Data Begins');
							console.dir(data);
							console.dir(textStatus);
							console.dir(jqXHR);
							console.dir('success Data Ends');
							mss_status_updater = setTimeout(mss_update_scan_status,1000);
						},
						error: function( jqXHR, textStatus, errorThrown){},
						complete: function(jqXHR_data, textStatus) {
							console.log('This page needs to reload to watch progress.')
							// location.reload();
						},
					});
				});
			});
		</script>
		<?php
	}

	public function start_scanning() {
		if ( $this->indexing ) {
			$this->flog( 'Indexing already in progress' );
			return; // Already indexing, don't start again
		} else {
			$this->flog( 'Starting ' . __FUNCTION__ );
		}

		$this->indexing       = true;
		$this->file_paths     = array();
		$this->current_dir    = ABSPATH;
		$this->dirs_to_scan[] = $this->current_dir; // Add the root directory to the queue

		$previous_state = $this->get_indexing_state();
		if ( $previous_state ) {
			$this->flog( 'Found previous state.' );
			$this->resume_indexing( $previous_state );
		} else {
			$this->index_files_recursively();
		}

		$this->indexing = false;
		$this->save_indexing_state( null ); // Clear the state after completion

		// Save the indexed files to the database or perform any other required operations
		$this->save_indexed_files();
	}

	private function resume_indexing( $previous_state ) {
		$this->unserialize( $previous_state );

		foreach ( $this->dirs_to_scan as $key => $dir ) {
			if ( in_array( $dir, $this->scanned_dirs ) ) {
				unset( $this->dirs_to_scan[ $key ] );
			}
		}

		$this->index_files_recursively();
	}

	public function index_files_recursively() {
		while ( ! empty( $this->dirs_to_scan ) ) {
			$current_dir = array_shift( $this->dirs_to_scan );

			// $this->flog( 'Indexing dir: ' . $current_dir );

			if ( $this->valid_dir( $current_dir ) ) {
				$entries = scandir( $current_dir );

				if ( $entries !== false ) {
					$all_files_scanned = true; // Flag to check if all files in the current directory are scanned

					if ( $entries !== false ) {
						foreach ( $entries as $entry ) {
							if ( $entry !== '.' && $entry !== '..' ) {
								$full_path = trailingslashit( $current_dir ) . $entry;
								if ( $this->valid_file( $full_path ) ) {
									// $this->flog( 'Indexing file: ' . $full_path );
									$this->file_paths[] = $full_path;
								} elseif ( $this->valid_dir( $full_path ) ) {
									$this->dirs_to_scan[] = $full_path; // Add subdirectories to the queue
									$all_files_scanned    = true; // If there are subdirectories, we can't say that all files in the current directory are scanned
								}
								$this->maybe_save_and_fork_via_ajax();
								
							}
						}

						// If all files in the current directory are scanned, mark it as fully scanned
						if ( $all_files_scanned ) {
							$this->scanned_dirs[] = $current_dir;
						}
					} else {
						// Handle the error if scandir fails
						error_log( "Error scanning directory '{$current_dir}'" );
					}
				}
			}
		}
		$this->flog( '$this->file_paths' );
		$this->flog( $this->file_paths );
		$this->flog( 'Indexing complete with ' . count( $this->file_paths ) . ' files.' );
	}

	public function serialize() {
		return serialize(
			array(
				'file_paths'   => $this->file_paths,
				'current_dir'  => $this->current_dir,
				'dirs_to_scan' => $this->dirs_to_scan,
			)
		);
	}

	public function unserialize( $serialized ) {
		$data = unserialize( $serialized );
		if ( is_array( $data ) ) {
			$this->file_paths   = $data['file_paths'];
			$this->current_dir  = $data['current_dir'];
			$this->dirs_to_scan = $data['dirs_to_scan'];
			// Restore any other properties here
		}
	}

	private function get_indexing_state() {
		$file_path = trailingslashit( __DIR__ ) . 'data.txt'; // Replace with the desired file path
		if ( file_exists( $file_path ) ) {
			$data = file_get_contents( $file_path );
			return $data;
		}
		return null;
	}

	public function maybe_save_and_fork_via_ajax() {
		$max_execution_time = ini_get( 'max_execution_time' ); // Get the max_execution_time
		$remaining_time     = $_SERVER['REQUEST_TIME'] + $max_execution_time - time();
		if ( $remaining_time <= 2 ) {
			// If there are 2 seconds or less remaining, save the data
			$state_data = $this->serialize();
			$this->save_indexing_state( $state_data );
			$this->flog( '' );
			$this->flog( 'Forking because of remaining_time:' . $remaining_time . ' current dir: ' . $this->current_dir . "\n Directories to scan:" );
			$this->flog( $this->dirs_to_scan );
			$this->flog( '' );
			$fork = wp_remote_get(
				admin_url( 'admin-ajax.php?action=mss_start_scan' ),
				array(
					'timeout'  => 0.01,
					'blocking' => false,
				)
			);

				exit;
		} else {
			// $this->flog( '$max_execution_time is ' . $max_execution_time . ' and $remaining_time is ' . $remaining_time );
		}
	}

	private function save_indexing_state( $state_data ) {
		$file_path = trailingslashit( __DIR__ ) . 'data.txt'; // Replace with the desired file path
		file_put_contents( $file_path, $state_data );
	}

	private function save_indexed_files() {
		// Implement the logic to save indexed files to the database or perform other operations.
		// For example, you can use update_option( 'file_indexed_files', $this->file_paths ) to save the data as an option in the WordPress database.
	}

	function is_cli() {
		return defined( 'WP_CLI' ) && WP_CLI;
	}

	function valid_dir( $dir ) {
		if ( ! is_dir( $dir ) ) {
			return;
		}
		if ( is_dir( $dir ) && is_readable( $dir ) && ! is_link( $dir ) ) {
			return true;
		} else {
			$this->flog( $dir . ' invalid dir. Specs:  is_dir:' . is_dir( $dir ) . ' is_readable:' . is_readable( $dir ) . ' is_link:' . is_link( $dir ) );
		}
	}

	function valid_file( $file ) {
		if ( ! is_file( $file ) ) {
			return;
		}
		if ( is_file( $file ) && is_readable( $file ) && ! is_link( $file ) && filesize( $file ) && filesize( $file ) < $this->filemaxsize ) {
			return true;
		} else {
			$this->flog( $file . ' invalid file. Specs:  is_file:' . is_file( $file ) . ' is_readable:' . is_readable( $file ) . ' is_link:' . is_link( $file ) . ' filesize:' . filesize( $file ) . ' filemaxsize:' . $this->filemaxsize );
		}
	}

	function flog( $str ) {
		if ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
			$date = date( 'Ymd-G:i:s' ); // 20171231-23:59:59
			$date = $date . '-' . microtime( true );

			$file = '/var/www/html/dev/plugindev/wp/wp-content/plugins/malcure-security-suite/log.log';

			$str = print_r( $str, true );
			if ( ! $this->is_cli() ) {
				file_put_contents( $file, $str . PHP_EOL, FILE_APPEND | LOCK_EX );
			} else {
				WP_CLI::log( $str );
			}
		}
	}
}

Malcure_Malware_Scanner::get_instance();
