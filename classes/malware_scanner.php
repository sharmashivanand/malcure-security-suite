<?php
final class MI_Malware_Scanner {

	public $filemaxsize = 1111111;

	static function get_instance() {
		static $instance = null;
		if ( is_null( $instance ) ) {
			$instance = new self();
			$instance->init();
		}
		return $instance;
	}

	private function __construct() {
		// parent::__construct();
	}

	function init() {

		$backtrackLimit = ini_get( 'pcre.backtrack_limit' );
		if ( is_numeric( $backtrackLimit ) ) {
			$backtrackLimit = (int) $backtrackLimit;
			if ( $backtrackLimit > 1000000 ) {
				ini_set( 'pcre.backtrack_limit', 1000000 );
				ini_set( 'pcre.recursion_limit', 1000000 );
			}
		}

		$this->definitions = self::get_malware_file_definitions();

		add_action( 'wp_ajax_mss_queue_full_scan', array( $this, 'enqueue_full_scan' ) );
		add_action( 'wp_ajax_nopriv_mss_queue_full_scan', 'enqueue_full_scan' );
		add_action( 'wp_ajax_execute_full_scan', array( $this, 'execute_full_scan' ) );
		add_action( 'wp_ajax_nopriv_execute_full_scan', array( $this, 'execute_full_scan' ) );
		add_action( 'wp_ajax_mss_batch_file_scan_request', array( $this, 'batch_file_scan_handler' ) );
		add_action( 'wp_ajax_nopriv_mss_batch_file_scan_request', array( $this, 'batch_file_scan_handler' ) );
		// add_action( 'wp_ajax_mss_scan_status', array( $this, 'scan_status_handler' ) );
		add_action( 'wp_ajax_nopriv_mss_scan_status', '__return_false' );
		add_action( 'upgrader_process_complete', array( $this, 'delete_checksums' ), 9999, 2 );
		add_action( 'MI_security_suite_add_meta_boxes', array( $this, 'add_meta_boxes' ), 8 );
		// add_action( 'wp', array( $this, 'trigger_maintenance' ) );

		add_filter( 'cron_schedules', array( $this, 'add_cron_schedules' ) );

		if ( ! wp_next_scheduled( 'mss_every_three_hours_exec' ) ) {
			wp_schedule_event( time(), 'mss_every_three_hours', 'mss_every_three_hours_exec' );
		}

		// add_action( 'hook_mi_every_six_hours', array( $this, 'event_every_six_hours' ) );
	}

	/**
	 * Trigger maintenance
	 */
	function mss_every_three_hours_exec() {
		$this->trigger_maintenance();
	}

	/**
	 * Add cron schedules
	 *
	 * @param [type] $schedules
	 * @return void
	 */
	function add_cron_schedules( $schedules ) {
		$schedules['mss_every_three_hours'] = array(
			'interval' => 10800,
			'display'  => __( 'Malcure Security Suite: Every Three Hours' ),
		);
		return $schedules;
	}

	/**
	 * Trigger routine meintenance and cleanup
	 *
	 * @return void
	 */
	function trigger_maintenance() {
		mss_utils::do_maintenance();
	}

	/**
	 * Helper function to debug options
	 *
	 * @param [type] $option
	 * @param [type] $old_value
	 * @param [type] $value
	 * @return void
	 */
	function options_debug( $option, $old_value, $value ) {
		if ( $option == 'MSS' ) {
			if ( empty( $value['scan'] ) ) {
				return;
			} else {
			}
		}
	}

	/**
	 * Delete core shchecksums
	 *
	 * @return void
	 */
	function delete_checksums() {
		mss_utils::delete_option_checksums_core();
	}

	/**
	 * Add scanner metabox to the UI
	 *
	 * @return void
	 */
	function add_meta_boxes() {
		add_meta_box( 'mss_scanner', 'Malware Scanner', array( $this, 'scanner_meta_box' ), $GLOBALS['MI_security_suite']['pagehook'], 'main' );
	}

	/**
	 * Update the malware definitions
	 */
	function update_definitions() {
		if ( mss_utils::is_registered() ) {
			mss_utils::update_definitions();
			return true;
		}
	}

	/**
	 * Add scanner metabox UI to the WordPress admin area
	 */
	function scanner_meta_box() {

		$running = $this->is_scan_running();
		if ( $running ) {
			$attribs = 'mss_action="cancel_scan"';
			$ui      = 'Cancel Scan&rarr;';
		} else {
			$attribs = 'mss_action="start_scan"';
			$ui     = 'Scan &rarr;';
		}

		echo '<input class="mss_action" value="' . $ui . '" id="mss_scan_btn" type="submit" ' . $attribs . '/>';
		// mss_utils::llog( mss_utils::get_setting( 'log' ) );
		// mss_utils::delete_setting( 'log' );
		// mss_utils::delete_setting( 'scan_id' );
		// mss_utils::delete_setting( 'scan_progress' );
			// mss_utils::do_maintenance();
		mss_utils::fetch_theme_checksums();
		echo '<div id="scan_status"><div id="scan_completion"></div></div>';
		echo '<div id="scan_results"></div>';
		?>
		<script type="text/javascript">
			running = <?php echo intval( $running ); ?>;
			jQuery(document).ready(function($){
				console.log('clicked');
				$("#mss_scan_btn").click(function(e){
					e.preventDefault();
					if($(this).attr('mss_action') == 'start_scan'){
						console.log('Initiating Scan');
						mss_queue_full_scan = {
							mss_queue_full_scan_nonce: '<?php echo wp_create_nonce( 'mss_queue_full_scan' ); ?>',
							action: "mss_queue_full_scan",
						};
						$.ajax({
							url: ajaxurl,
							method: 'POST',
							data: mss_queue_full_scan,
							success: function(data, textStatus, jqXHR) {
								console.dir('success Data Begins');
								console.dir(data);
								console.dir(textStatus);
								console.dir(jqXHR);
								console.dir('success Data Ends');
								mss_status_updater = setTimeout(mss_update_scan_status,1000);
								$("#mss_scan_btn").attr('value','Cancel Scan →');
								//$("#mss_scan_btn").attr('disabled','disabled');
								$("#mss_scan_btn").attr('mss_action','cancel_scan');
								if ((typeof data) != 'object') {
								}
								if (data.hasOwnProperty('success')) {
								} else {
								}
							},
							error: function( jqXHR, textStatus, errorThrown){},
							complete: function(jqXHR_data, textStatus) {
								console.log('This page needs to reload to watch progress.')
								// location.reload();
							},
						});
					}
					if($(this).attr('mss_action') == 'cancel_scan'){
						console.log('Cancelling Scan');
						ajax_request('delete_setting','scan_id','scan_cancelled');
					}
				});
				
				if ( running ) {
					// initiate recurring
					console.log('setTimeout since running. This does not work because the callback fires itself. It should only fire itself if the scan is still running, instead of checking progress.');
					mss_status_updater = setTimeout(mss_update_scan_status,1000);
				}
				else {
					// just attempt to load previous results
					mss_update_scan_status();
				}
			});

			function scan_cancelled($obj){
				var $ = jQuery.noConflict();
				console.log('SCAN CANCEL SUCCESS');
				console.log($obj);
				$("#mss_scan_btn").attr('mss_action','start_scan');
				$("#mss_scan_btn").attr('value','Scan →');
			}

			function mss_update_scan_status() {
				var $ = jQuery.noConflict();
				mss_scan_status = {
					mss_scan_status_nonce: '<?php echo wp_create_nonce( 'mss_scan_status' ); ?>',
					action: "mss_scan_status",
				};
				$.ajax({
					url: ajaxurl,
					method: 'POST',
					data: mss_scan_status,
					success: function (data, textStatus, jqXHR) {
						console.dir(data);
						// received ajax response successfully (could be an wp_send_json error or success = both)
						if (data.success) {
							if (data.data) {
								$('#scan_status').addClass('inprogress');
								if (data.data.total) {
									// console.dir(data.data.total);
									// console.log('found total:' + data.data.total);
									remaining = parseInt(data.data.remaining);
									runing = parseInt(data.data.running);
									total = parseInt(data.data.total);
									done = total - remaining;
									per = (done / total) * 100;
									per_done = per;
									started = parseInt(data.data.started);
									now = parseInt(data.data.now);
									secs = now - started;
									
									console.log( 'Scanning: ' + data.data.scanning );
									console.log( 'Runing: ' + data.data.runing );
									try{ 
										estimated_time= new Date( ( ( data.data.total - done ) / ( done / secs ) ) * 1000).toISOString().substr(11, 8);
										console.log( 'Estimated Time Remaining: ' + estimated_time );
									}
									catch(e){
									}
									console.log(per_done.toFixed(1) + '% ' + done + '/' + data.data.total + ' @ ' +  done / secs + ' Files / Sec');
									//$('#scan_status').css('background', '#36717d linear-gradient(90deg, hsla(175, 100%, 75%, 1) 0%, hsla(175, 100%, 75%, 1) ' + per_done + '%, transparent ' + per_done + '%, transparent )');
									$('#scan_completion').css('background', 'hsl(200, 40%, 35%) linear-gradient(90deg, hsla(175, 100%, 75%, 1) 0%, hsla(175, 100%, 75%, 1) ' + per_done + '%, transparent ' + per_done + '%, transparent )');
									// $('#scan_status').html(Number.parseFloat(per_done).toFixed(2) + '%');
									$('#scan_completion').html('<span id="text_percentage">' + Number.parseFloat(per_done).toFixed(1) + '%</span>');
								}
								if (data.data.results && (data.data.results.files || data.data.results.db)) {
									if (data.data.results.files) {
										files = data.data.results.files;
										//console.dir(files);
										//$results = '<table>';
										$results = '';
										for (const [key, value] of Object.entries(files)) {
											//console.dir(value);
											$results += `<div class="result result_file ${value.severity}"><span class="threat sig ${value.severity}">${value.id}</span><span class="file">${key}</span></div>`;
											// $results += `<tr><td><span class="sig threat ${value.severity}"><span class="sig">${value.id}</span><span class="file">${key}</span></span></td></tr>`;
										}
										//$results += '</table>';
										$('#scan_results').html($results);
									}
								}
								try{
									if(remaining && running) {
										mss_status_updater = setTimeout(mss_update_scan_status, 1000);
									}
									else {
										$("#mss_scan_btn").attr('value', "Scan →");
										// $("#mss_scan_btn").removeAttr('disabled');
									}
								}
								catch(e){
									console.dir(jqXHR.responseJSON.data);
									console.dir(jqXHR.responseJSON.data.remaining);
								}
							}
						} else {
							console.log('Updater got failure.');
						}
						if ((typeof data) != 'object') {}
						if (data.hasOwnProperty('success')) {} else {}
					},
					error: function (jqXHR, textStatus, errorThrown) {
						console.dir('eberror: updater error Data Begins');
						console.dir(jqXHR);
						console.dir(textStatus);
						console.dir(errorThrown);
						console.dir('cberror: updater error Data Ends');
					},
					complete: function (jqXHR_data, textStatus) {
					},
				});
			}
		</script>
		<?php
	}

	/**
	 * Step 1: Enqueue a full scan async and return
	 */
	function enqueue_full_scan() {
		if ( ! wp_doing_ajax() && ! wp_doing_cron() ) {
			wp_die();
		}
		if ( wp_doing_ajax() ) {
			check_ajax_referer( 'mss_queue_full_scan', 'mss_queue_full_scan_nonce' );
			if ( ! current_user_can( mss_utils::$cap ) ) {
				wp_die();
			}
		}
		// mss_utils::do_maintenance();
		$already_running = $this->is_scan_running(); // mss_utils::get_setting( 'scan_id' );
		if ( $already_running ) {
			mss_utils::append_log( __FUNCTION__ . ': ERROR: Scan ID ' . $already_running . ' is already running' );
			wp_send_json_error( 'ERROR: Scan ID ' . $already_running . ' is already running' );
		}
		// Test scannability here
		$scan_id = time();
		mss_utils::update_setting( 'scan_id', $scan_id );
		$args     = array(
			'blocking' => false,
			'timeout'  => 0.01,
			'body'     => array(
				'action'        => 'execute_full_scan',
				'handshake_key' => wp_hash_password( $scan_id ),
			),
		);
		$response = wp_remote_post(
			admin_url( 'admin-ajax.php' ),
			$args
		);
		wp_send_json_success( $scan_id );
	}

	/**
	 * Step 2: Processes a full file + DB scan over remote requests
	 */
	function execute_full_scan() {
		$start_time = microtime( true );
		$scan_id    = mss_utils::get_setting( 'scan_id' );
		if ( empty( $scan_id ) || empty( $_REQUEST['handshake_key'] ) || ! wp_check_password( $scan_id, $_REQUEST['handshake_key'] ) ) {
			wp_die();
		}
		$result  = $this->update_definitions();
		$success = $this->file_scan_loop( $scan_id );
		if ( $success ) {
			$success = $this->db_scan_loop( $scan_id );
		} else {
			mss_utils::append_log( __FUNCTION__ . ': File_scan retuned failure. Skipping database scan' );
		}
		mss_utils::delete_setting( 'scan_id' ); // always delete scan_id and allow user to attempt another scan
		// mss_utils::update_setting( 'scan_id', $scan_id );
	}

	/**
	 * File scan routine
	 *
	 * @param [type] $scan_id
	 * @return void
	 */
	function file_scan_loop( $scan_id ) {
		$cores   = mss_utils::num_cpus();
		$timeout = ini_get( 'max_execution_time' );
		if ( empty( $timeout ) ) {
			$timeout = 29;
		} else {
			$timeout = $timeout - 1;
		}
		$start_time = microtime( true );
		$checksums  = $this->get_checksums();
		$files      = mss_utils::get_files();
		if ( ! empty( $files['files'] ) ) {
			$files = $files['files'];
			$total = count( $files );
			mss_utils::update_setting(
				'scan_progress',
				array(
					'total'     => $total,
					'remaining' => $total,
				)
			);
		} else {
			mss_utils::append_log( __FUNCTION__ . ': Scanner could not generate a list of files.' );
			throw new Exception( 'Scanner could not generate a list of files.' );
		}
		$site_url    = admin_url( 'admin-ajax.php' );
		$host        = parse_url( $site_url, PHP_URL_HOST );
		$local_url   = str_replace( $host, 'localhost', $site_url );
		$failed      = array();
		$batch_size  = 11;
		$perf        = array();
		$segments    = 3;
		$files_done  = 0;
		$wait        = 0;
		$test_passed = -1;
		while ( $files && mss_utils::get_setting( 'scan_id' ) ) {
			set_time_limit( $timeout );
			if ( count( $perf ) >= $segments ) {
				$perf            = array_splice( $perf, count( $perf ) - $segments, $segments );
				$time_factor     = ( $timeout / 2 ) - $time_taken;
				$time_factor_per = ( $time_factor * 100 ) / ( $timeout / 2 );
				$polarity        = ( ( min( $perf ) < 0 ) || $time_factor < 0 ) ? -1 : 1;
				$factor          = abs( $time_factor_per / ( abs( array_sum( $perf ) ) / 2 ) );
				$boost           = ( $polarity * ( ( $batch_size * $factor ) / 100 ) );
				$batch_size      = round( $batch_size + $boost );
				$batch_size      = min( $batch_size, 111 );
				// $cpu             = @sys_getloadavg(); // will return NULL if this function is disabled
				// if ( $cores && ! is_null( $cpu ) && ( ( $cpu[0] / $cores ) > 1.11 ) ) {
				// $batch_size = round( $batch_size / $segments );
				// }
				$batch_size = max( $batch_size, 1 );
				if ( $batch_size == 1 ) { // if batch size continues to be 1, let's sleep 1 seconds on alternate requests
					$wait = ! $wait;
					if ( $wait ) {
						sleep( 1 );
					}
				}
			}
			$batch              = array_splice( $files, 0, $batch_size );
			$files_done        += count( $batch );
			$ts                 = microtime( true );
			$scan_request_start = microtime( 1 );
			if ( $test_passed == -1 || $test_passed ) {
				$results = $this->make_batch_file_scan_request( $batch, 'file', $_REQUEST['handshake_key'], $local_url, $host, $timeout );
			}
			// else {
			// mss_utils::append_log( __FUNCTION__ . ': Scan test failed. Cancelling remaining batches.' );
			// return false;
			// }
			$scan_request_end = microtime( 1 );
			$time_taken       = $scan_request_end - $scan_request_start;
			if ( $results ) {
				$perf[] = 1;
				if ( $test_passed == -1 ) {
					$test_passed = 1;
				}
			} else {
				$failed = array_merge( $failed, $batch );
				$perf[] = -1;
				if ( $test_passed == -1 ) {
					$test_passed = 0;
					return;
				}
			}
			$scan_progress = array(
				'total'     => $total,
				'remaining' => $total - $files_done,
				'rate'      => ( $files_done / ( microtime( 1 ) - $start_time ) ),
				'scanning'  => $batch[ count( $batch ) - 1 ],
			);
			mss_utils::update_setting( 'scan_progress', $scan_progress );
			if ( ! count( $files ) ) {
				// mss_utils::delete_setting( 'scan_progress' );
			}
			$te = microtime( true );
		}
		$end_time       = microtime( true );
		$execution_time = ( $end_time - $start_time );
		// mss_utils::delete_setting( 'scan_id' );
		return $execution_time;
	}

	/**
	 * Database scan routine
	 *
	 * @param boolean $scan_id
	 * @return void
	 */
	function db_scan_loop( $scan_id = false ) {
		return;
		$start_time_db = microtime( true );
		global $wpdb;
		$scan_sqls   = array(
			'post'      => "SELECT ID AS id, post_content AS content, post_type as post_type FROM $wpdb->posts where post_content LIKE '%s'",
			'post_meta' => "SELECT post_id AS id, meta_value AS content FROM $wpdb->postmeta where meta_value LIKE '%s'",
			'option'    => "SELECT option_id AS id, option_value AS content FROM $wpdb->options WHERE option_value LIKE '%s'",
			'comment'   => "SELECT comment_ID AS id, comment_content AS content FROM $wpdb->comments WHERE comment_content LIKE '%s' AND comment_approved = '1'",
		);
		$definitions = $this->get_malware_db_definitions();
		$db_results  = array();
		$db_scan_log = array();
		if ( ! empty( $GLOBALS['WPMR']['wpmr_extra_db_query'] ) && ! empty( $GLOBALS['WPMR']['wpmr_extra_db_regex'] ) ) {
			$definitions['DWPMR'] = array(
				'severity'  => 'severe',
				'query'     => $GLOBALS['WPMR']['wpmr_extra_db_query'],
				'signature' => $GLOBALS['WPMR']['wpmr_extra_db_regex'],
			);
		};
		foreach ( $definitions as $ver => $details ) {
			foreach ( $scan_sqls as $key => $sql ) {
				$results = $wpdb->get_results( $wpdb->prepare( $sql, mss_utils::decode( $details['query'] ) ), ARRAY_A );
				foreach ( $results as $result ) {
					$content     = $result['content'];
					$id          = sanitize_text_field( $result['id'] );
					$post_status = empty( $result['post_type'] ) ? '' : 'post-type &rarr; ' . $result['post_type'] . '.';
					$matches     = preg_match( mss_utils::decode( $details['signature'] ), $content, $found );
					$pcre_err    = preg_last_error();
					if ( $pcre_err != 0 ) {
						continue;
					}
					if ( $matches >= 1 ) {
						if ( in_array( $details['severity'], array( 'severe', 'high' ) ) ) {
							mss_utils::update_setting( 'infected', true );
						}
						$db_results[ $id ]  = $this->set_status( $details['severity'], 'Found database infection(s) in ' . ucwords( $key ) . " id $id. $post_status Threat Level &rarr; " . $details['severity'] . '.', $ver );
						$db_scan_log[ $id ] = array(
							'severity'  => $details['severity'],
							'infection' => $ver,
							'type'      => ucwords( $key ),
							'id'        => $id,
						);
					}
				}
			}
		}
		if ( $db_results ) {
			if ( ! empty( $db_scan_log ) && ! empty( $GLOBALS['WPMR']['timestamp'] ) ) {
				$record      = $GLOBALS['WPMR']['timestamp'];
				$db_scan_log = array( 'db' => $db_scan_log );
				$db_scan_log = json_encode( $db_scan_log );
			}
			return $db_results;
		}
		$end_time_db = microtime( true );
		return $db_results;
	}

	/**
	 * Function to request a singular remote scan
	 *
	 * @param [type] $data
	 * @param [type] $type
	 * @return void
	 */
	function make_batch_file_scan_request( $arrFiles, $type, $handshake_key, $local_url = '', $host = '', $timeout = 5 ) {
		$start_time = microtime( true );
		$args       = array(
			'timeout'     => $timeout,
			'httpversion' => '1.1',
			'body'        => array(
				'action'        => 'mss_batch_file_scan_request',
				'data'          => $arrFiles,
				'handshake_key' => $handshake_key,
				'type'          => $type,
			),
		);
		$url        = admin_url( 'admin-ajax.php' );
		$response   = wp_remote_post( $url, $args );
		if ( wp_remote_retrieve_response_code( $response ) != 200 ) {
			mss_utils::append_log( 'ERROR: ' . __FUNCTION__ . ': received response code ' . wp_remote_retrieve_response_code( $response ) );
			return;
		}
		$body = wp_remote_retrieve_body( $response );
		if ( $body ) {
			$body = json_decode( $body, 1 );
			if ( is_null( $body ) ) { // invalid json
				return;
			} else { // valid json
				return true;
			}
		} else { // no body
			return;
		}
		mss_utils::flog( 'This should never be logged' );
		$end_time = microtime( true );
	}

	/**
	 * Final end-point, Responds to ajax scan request, scans synchronously, prone to hang
	 *
	 * @return void
	 */
	function batch_file_scan_handler() {
		$scan_id = mss_utils::get_setting( 'scan_id' );
		if ( empty( $scan_id ) || empty( $_REQUEST['handshake_key'] ) || ! wp_check_password( $scan_id, $_REQUEST['handshake_key'] ) ) {
			wp_die();
		}
		$data = $_REQUEST['data'];
		$type = $_REQUEST['type'];
		$temp = array_values( $data );
		$temp = array_splice( $temp, count( $temp ) - 1, 1 );
		$perf = array();
		if ( $type == 'file' ) {
			$files   = $data;
			$results = array();

			foreach ( $files as $file ) {
				// if ( preg_match( '/\.malware\/others/', $file ) || preg_match( '/wwwwp\-content/', $file ) ) { // || preg_match( '/plugins/', $file ) || preg_match( '/wp\-content/', $file )
				// continue;
				// }
				if ( $this->fails_checksum( $file ) ) {
					$start  = microtime( 1 );
					$scan   = $this->scan_file( $file );
					$perf[] = ( microtime( 1 ) - $start );
					if ( $scan ) {
						if ( ! empty( $scan['id'] ) ) {
							$results[ $file ] = $scan;
						} else {
						}
					} else {
					}
				}
			}
			$this->update_scan_results( $results, $scan_id, 'files' );
		}
		if ( ( $type == 'db' ) ) {
		}

		if ( count( $perf ) ) {
		}
		wp_send_json_success();
	}

	/**
	 * Returns status of a scanned file
	 *
	 * @param [type] $file
	 * @return array
	 *  (
	 *      'severity' => clean || unknown || mismatch || suspicious || infected    // This can be used to identify the severity of the infection
	 *      'label' => 'unknown file found' || 'suspicious file contents' || 'severe infection found' // This can be used to present information on the UI
	 */
	function scan_file( $file ) {

		$ext = self::get_file_extension( $file );

		if ( self::is_valid_file( $file ) ) {
			$status = array(
				'severity' => '',
				'label'    => '',
			);
			if ( $this->in_core_dir( $file ) ) { // since we are scanning this file
			}
			$contents = @file_get_contents( $file );
			if ( empty( $contents ) ) {
				return;
			}
			// $s = microtime(1);
			$definitions = $this->definitions;// self::get_malware_file_definitions();
			foreach ( $definitions as $definition => $signature ) {
				if ( $signature['class'] == 'htaccess' && $ext != 'htaccess' ) {
					continue;
				}
				$matches  = @preg_match( mss_utils::decode( $signature['signature'] ), $contents, $found );
				$pcre_err = preg_last_error();
				if ( $pcre_err != 0 ) {
					continue;
				}
				if ( $matches >= 1 ) {
					if ( in_array( $signature['severity'], array( 'severe', 'high' ) ) ) {
					}
					return array(
						'id'       => $definition,
						'severity' => $signature['severity'],
						'info'     => $signature['severity'],
					);
				}
			}
			$checksums = mss_utils::get_option_checksums_generated();
			$md5       = @md5_file( $file );
			if ( $md5 ) {
				$checksums[ mss_utils::normalize_path( $file ) ] = $md5;
			}
			mss_utils::update_option_checksums_generated( $checksums );
			return array(
				'id'       => '',
				'severity' => '',
				'info'     => '',
			);
		} else {
		}
	}

	/**
	 * Checks if a file is valid for scanning
	 */
	function is_valid_file( $file ) {
		if (
			is_file( $file ) && // Check if is actually a file
			filesize( $file ) && // check if the file is not empty
			filesize( $file ) <= $this->filemaxsize // Check if file-size qualifies
			) {
			return true;
		}
		return false;
	}

	/**
	 * returns the extension of a file
	 *
	 * @param [type] $filename
	 * @return void
	 */
	function get_file_extension( $filename ) {
		$nameparts = explode( '.', ".$filename" );
		return strtolower( $nameparts[ ( count( $nameparts ) - 1 ) ] );
	}

	/**
	 * Checks if a file is inside WP core directories ( inside wp-admin or wp-includes)
	 *
	 * @param [type] $file
	 * @return true if file is inside one of core directories false otherwise
	 */
	function in_core_dir( $file ) {
		$file = mss_utils::realpath( $file );
		if ( strpos( $file, trailingslashit( mss_utils::realpath( ABSPATH ) ) . 'wp-admin/' ) !== false || strpos( $file, trailingslashit( mss_utils::realpath( ABSPATH ) ) . WPINC ) !== false ) {
			return true;
		}
		return false;
	}

	/**
	 * Gets malware definitions for files only
	 */
	static function get_malware_file_definitions() {
		$defs = self::get_definitions_data();
		if ( ! empty( $defs['files'] ) ) {
			return $defs['files'];
		}
	}

	/**
	 * Gets malware definitions for database only
	 *
	 * @return void
	 */
	static function get_malware_db_definitions() {
		$defs = self::get_definitions_data();
		if ( ! empty( $defs['db'] ) ) {
			return $defs['db'];
		}
	}

	/**
	 * Gets all definitions excluding version
	 *
	 * @return void
	 */
	static function get_definitions_data() {
		$defs = mss_utils::get_option_definitions();
		if ( ! empty( $defs['malware'] ) ) {
			return $defs['malware'];
		}
	}

	/**
	 * Returns true if scan is still running
	 */
	function is_scan_running() {
		$scan_id_setting = mss_utils::get_setting( 'scan_id' );
		return $scan_id_setting;
		// if ( $scan_id == $scan_id_setting ) {
		// return true;
		// }
	}

	/**
	 * Returns all files that have checksum failure
	 *
	 * @param [type] $files
	 * @return void
	 */
	function get_failed_files( $files ) {
		$total         = count( $files );
		$scan_progress = array(
			'total'     => $total,
			'remaining' => count( $files ),
		);
		$i             = 0;
		foreach ( $files as $file ) {
			$start_time = microtime( true );
			$end_time   = microtime( true );
			set_time_limit( 1 );
			if ( $this->fails_checksum( $file ) ) {
				$failed[] = $file;
			}
			$i++;
			if ( $i % 100 == 0 ) {
				$scan_progress = array(
					'total'     => $total,
					'remaining' => $total - $i,
				);
				mss_utils::update_setting(
					'scan_progress',
					$scan_progress
				);
			}
			$execution_time = ( $end_time - $start_time );
		}
		return $failed;
	}

	/**
	 * Updates the scan results
	 */
	function update_scan_results( $data, $scan_id, $type ) {
		if ( ! $scan_id ) {
			die();
		}
		$scan_id = strval( $scan_id );
		$scan   = mss_utils::get_option( 'scan' );
		if ( empty( $scan ) ) {
			$scan = array();
		}
		if ( empty( $scan[ $scan_id ] ) ) {
			$scan[ $scan_id ] = array( $type => array() );
		}
		$scan[ $scan_id ][ $type ] = array_merge( $scan[ $scan_id ][ $type ], $data );
		mss_utils::update_option( 'scan', $scan );
	}

	/**
	 * Send status of the scan
	 * return total count, remaining count, (bool) complete, time to expiry
	 */
	function scan_status_handler() {
		// sleep(1000000);
		// mss_utils::fetch_checksums();
		$progress = mss_utils::get_setting( 'scan_progress' );
		if ( empty( $progress ) ) {
			$progress = array(
				'started'   => false,	// When the scan was started
				'results'   => array(),	// Results of the scan
				'total'     =>  mss_utils::get_files(),	// Total number of files
				'remaining' => 0,//mss_utils::get_files(),	// Total number of remaining files
				'running'  => mss_utils::get_setting( 'scan_id' ),	// The running ID of the scan
				'now'       => time(), // Current timestamp
				'scanning'  => '',	// If scanning or not
				// 'setting' => mss_utils::get_setting( 'scan_progress' )
			);
		}
		$progress = array(
			'started'   => false,
			'results'   => array(),
			'total'     => ( ! empty( $progress['total'] ) ) ? $progress['total'] : 0,
			'remaining' => ( ! empty( $progress['remaining'] ) ) ? $progress['remaining'] : 0,
			'running'  => mss_utils::get_setting( 'scan_id' ),
			'now'       => time(),
			'scanning'  => ( ! empty( $progress['scanning'] ) ) ? $progress['scanning'] : '',
			// 'setting' => mss_utils::get_setting( 'scan_progress' )
		);
		$scan_id = mss_utils::get_setting( 'scan_id' );
		$scan    = mss_utils::get_option( 'scan' );
		// scan_progress
		if ( ! $scan ) {
			wp_send_json_error( $progress );
		}
		$scan = array_slice( $scan, count( $scan ) - 1, 1, true );
		if ( ! $scan ) {
			wp_send_json_error( $progress );
		}
		$progress['started']  = array_keys( $scan )[0];
		$progress['results']  = array_values( $scan )[0];
		wp_send_json_success( $progress );
	}

	/**
	 * Adds submenu page for scanner
	 */
	function submenu_page() {
		add_submenu_page(
			'_mss',
			'Malcure Malware Scanner',
			'Malware Scanner',
			MSS_GOD,
			'scanner_mss',
			array( $this, 'scanner_mss_page' ),
			null
		);
	}

	/**
	 * Get all checksums
	 *
	 * @return array
	 */
	function get_checksums() {
		return mss_utils::fetch_checksums();
	}

	/**
	 * Check if a file fails checksum
	 *
	 * @param [type] $local_file
	 * @return true on fail, false on success
	 */
	function fails_checksum( $local_file ) {
		$start     = microtime( 1 );
		$checksums = $this->get_checksums();
		$expected  = @md5_file( $local_file );
		if ( ! $expected ) {
			return 1;
		}
		$match_path = mss_utils::normalize_path( $local_file );
		if ( array_key_exists( $match_path, $checksums ) ) {
			if ( is_array( $checksums[ $match_path ] ) ) {
				if ( ! in_array( $expected, $checksums[ $match_path ] ) ) {
					return 1;
				} else {
					return;
				}
			} else {
				if ( $checksums[ $match_path ] != $expected ) {
					return 1;
				} else {
					return;
				}
			}
		} else {
			return 1;
		}
	}
}

MI_Malware_Scanner::get_instance();
